<#@ template language="C#" debug="true" hostspecific="true" #>
<#@ output extension=".d.ts" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="Microsoft.VisualStudio.Shell.Interop.8.0" #>
<#@ assembly name="EnvDTE" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="EnvDTE" #>
<#@ import namespace="Microsoft.VisualStudio.Shell.Interop" #>
<#@ import namespace="Microsoft.VisualStudio.TextTemplating" #>
<#@ assembly name="$(SolutionDir)\\T4TS\\bin\\Debug\\T4TS.Dll" #>
<#@ Include File="T4TS.tt.settings.t4" #>
/****************************************************************************
  Generated by T4TS.tt - don't make any changes in this file
****************************************************************************/
<# foreach(var module in GetDataToRender()) { #>

<#= module.IsGlobal ? "// -- Begin global interfaces" : "module " + module.QualifiedName + " {" #>
<# foreach(var tsInterface in module.Interfaces) { #>
<#= module.IsGlobal? "" : "    " #>/** Generated from <#= tsInterface.FullName #> **/
<#= module.IsGlobal? "" : "    " #><#= module.IsGlobal?"":"export "#>interface <#= tsInterface.Name #> <#= tsInterface.Parent != null ? "extends "  + (tsInterface.Parent.Module.IsGlobal ? "/* global interface */" : tsInterface.Parent.Module.QualifiedName + ".") + tsInterface.Parent.Name : "" #> {
<# foreach(var member in tsInterface.Members) { #>
    <#= module.IsGlobal? "" : "    " #><#= member.Name + (member.Optional ? "?" : "") #>: <#=member.Type #>;
<# } #>
<# if (tsInterface.IndexedType != null) { #>
    <#= module.IsGlobal? "" : "    " #>[index: number]: <#= tsInterface.IndexedType #>;
<# } #>
<#= module.IsGlobal? "" : "    " #>}
<# } #>
<#= module.IsGlobal ? "// -- End global interfaces" : "}" #>
<# } #>
<#+ 

List<T4TS.TypeScriptModule> GetDataToRender() {
    DTE dte = null;

    // Get the DTE service from the host
    var serviceProvider = Host as IServiceProvider;
    if (serviceProvider != null)
        dte = serviceProvider.GetService(typeof(SDTE)) as DTE;

    // Fail if we couldn't get the DTE. This can happen when trying to run in TextTransform.exe
    if (dte == null)
        throw new Exception("Can only execute through the Visual Studio host");

    var project = GetProjectContainingT4File(dte);
        
    if (project == null)
        throw new Exception("Could not find the VS project containing the T4TS file.");

    // Read settings from T4TS.tt.settings.tt
    var settings = new T4TS.Settings
    {
        DefaultModule = DefaultModule,
        DefaultOptional = DefaultOptional
    };

    var generator = new T4TS.CodeGenerator(project, settings);

    return generator.GetAllInterfaces().ToList();
}

Project GetProjectContainingT4File(DTE dte) {

    // Find the .tt file's ProjectItem
    ProjectItem projectItem = dte.Solution.FindProjectItem(Host.TemplateFile);

    // If the .tt file is not opened, open it
    if (projectItem.Document == null)
        projectItem.Open(Constants.vsViewKindCode);

    // Mark the .tt file as unsaved. This way it will be saved and update itself next time the
    // project is built. Basically, it keeps marking itself as unsaved to make the next build work.
    // Note: this is certainly hacky, but is the best I could come up with so far.
    projectItem.Document.Saved = false;

    return projectItem.ContainingProject;
}

#>

