<#@ template language="C#" debug="true" hostspecific="true" #>
<#@ output extension=".d.ts" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="Microsoft.VisualStudio.Shell.Interop.8.0" #>
<#@ assembly name="EnvDTE" #>
<#@ assembly name="EnvDTE80" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="Microsoft.VisualStudio.Shell.Interop" #>
<#@ import namespace="EnvDTE" #>
<#@ import namespace="EnvDTE80" #>
<#@ assembly name="$(SolutionDir)\\T4TS\\bin\\Debug\\T4TS.Dll" #>
<#@ import namespace="Microsoft.VisualStudio.TextTemplating" #>
<#@ import namespace="T4TS" #>

<#PrepareDataToRender(this); #>
/************************************************
  Generated file
************************************************/
<# foreach(var tsInterfaceGroup in output.GroupBy(i => i.Module)) { #>

module <#= tsInterfaceGroup.Key #>{

<# foreach(var tsInterface in tsInterfaceGroup) { #>
    /** Generated from <#= tsInterface.FullName #> **/
    export interface <#= tsInterface.Name #> {
<# foreach(var member in tsInterface.Members) { #>
        <#= member.Name #>: <#=member.Type #>;
<# } #>
<# if (tsInterface.IndexerType != null) { #>
        [index: number]: <#= tsInterface.IndexerType #>;
<# } #>
    }

<# } #>
}
<# } #>
<#+ 
static DTE Dte;
static Project Project;
static string AppRoot;
static TextTransformation TT;
static string T4FileName;
static string T4Folder;
static string GeneratedCode = @"GeneratedCode(""T4TS"", ""1.0"")";
static string attributeFullName = "T4TS.TypeScriptInterfaceAttribute";
static List<T4TS.Generator.TypeScriptInterface> output;

void PrepareDataToRender(TextTransformation tt) {
    TT = tt;
    T4FileName = Path.GetFileName(Host.TemplateFile);
    T4Folder = Path.GetDirectoryName(Host.TemplateFile);
    //Areas = new HashSet<AreaInfo>();
    //ResultTypes = new Dictionary<string, ResultTypeInfo>();

    // Get the DTE service from the host
    var serviceProvider = Host as IServiceProvider;
    if (serviceProvider != null) {
        Dte = serviceProvider.GetService(typeof(SDTE)) as DTE;
    }

    // Fail if we couldn't get the DTE. This can happen when trying to run in TextTransform.exe
    if (Dte == null) {
        throw new Exception("Can only execute through the Visual Studio host");
    }

    Project = GetProjectContainingT4File(Dte);
	
    if (Project == null) {
        Error("Could not find the VS Project containing the T4TS file.");
        return;
    }

	var generator = new T4TS.Generator.CodeGenerator(Project);

	output = generator.GetInterfaces().ToList();

    // Get the path of the root folder of the app
    //AppRoot = Path.GetDirectoryName(Project.FullName) + '\\';
	//VisitFiles(Project.ProjectItems, "");
}

Project GetProjectContainingT4File(DTE dte) {

    // Find the .tt file's ProjectItem
    ProjectItem projectItem = dte.Solution.FindProjectItem(Host.TemplateFile);

    // If the .tt file is not opened, open it
    if (projectItem.Document == null)
        projectItem.Open(Constants.vsViewKindCode);

    // Mark the .tt file as unsaved. This way it will be saved and update itself next time the
    // project is built. Basically, it keeps marking itself as unsaved to make the next build work.
    // Note: this is certainly hacky, but is the best I could come up with so far.
    projectItem.Document.Saved = false;

    return projectItem.ContainingProject;
}

#>

